using System;									// System contains a lot of default C# libraries 
using GXPEngine;								// GXPEngine contains the engine

namespace GXPEngine
{
    public class Player : AnimationSprite
    {
        int animationDrawsBetweenFrames;
        int step;

        int speedX;
        int speedY;

        bool wIsPressed;
        bool dIsPressed;
        bool aIsPressed;

        bool jump;

        Healthbar _healthbar;

        Sprite _jump;

        public Player() : base("player_tile.png", 4, 1)
        {
            Spawn();

            animationDrawsBetweenFrames = 5;
            speedX = 5;
            speedY = 0;
        }

        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //                                                                                                                        Spawn()
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        void Spawn()
        {
            SetFrame(0);

            SetXY(game.width / 2, game.height / 2);
            SetOrigin(width / 2, height / 2);

            _healthbar = new Healthbar();
            AddChild(_healthbar);
        }

        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //                                                                                                                        HandleAnimation()
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        void HandleAnimation()
        {
            if (Input.GetKeyDown(Key.W))
            {
                wIsPressed = true;
            }
            if (Input.GetKeyUp(Key.W))
            {
                wIsPressed = false;
                SetFrame(0);
            }

            if (Input.GetKeyDown(Key.D))
            {
                dIsPressed = true;
                Mirror(false, false);
            }
            if (Input.GetKeyUp(Key.D))
            {
                dIsPressed = false;
                SetFrame(0);
            }

            if (Input.GetKeyDown(Key.A))
            {
                aIsPressed = true;
                Mirror(true, false);
            }
            if (Input.GetKeyUp(Key.A))
            {
                aIsPressed = false;
                SetFrame(0);
            }

            if (wIsPressed == true || dIsPressed == true || aIsPressed == true)
            {
                step = step + 1;

                if (step > animationDrawsBetweenFrames)
                {
                    NextFrame();
                    step = 0;
                }
            }
        }

        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //                                                                                                                        HandleHorizontalMovement()
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        void HandleHorizontalMovement()
        {
            if (Input.GetKey(Key.D))
            {
                Move(speedX, 0);
            }

            if (Input.GetKey(Key.A))
            {
                Move(-speedX, 0);
            }
        }

        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //                                                                                                                        HandleVerticalMovement()
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        void HandleVerticalMovement()
        {
            speedY = speedY + 2;
            y = y + speedY;

            if (Input.GetKeyDown(Key.W) && jump == false)
            {
                speedY = -32;
                jump = true;

                if (jump == true)
                {
                    _jump = new Sprite("player_jump.png");
                    AddChild(_jump);
                }

                if (jump == false)
                {
                    _jump.Destroy();
                }
            }
        }

        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //                                                                                                                        HandleBorders()
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        void HandleBorders()
        {
            x = Mathf.Clamp(x, (0 + (width / 4 + 25)), (1440 - (width / 4 + 25)));
            y = Mathf.Clamp(y, (0 + (height / 2)), (1080 - (height / 2)));
        }

        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //                                                                                                                        OnCollision()
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        public void OnCollision(GameObject other)
        {
            if (other is Enemy)
            {
                Globals.health = Globals.health - 1;
            }

            //if (y > 1000)
            // {
            ///    jump = false;
            //}
        }

        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //                                                                                                                        Update()
        //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        void Update()
        {
            HandleAnimation();
            HandleHorizontalMovement();
            HandleVerticalMovement();
            HandleBorders();
        }
    }
}
